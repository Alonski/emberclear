stages:
  - setup
  - quality
  - test
  - build
  - deploy

cache:
  # untracked: true
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - ${CI_PROJECT_DIR}/.cache_yarn
    # - ${CI_PROJECT_DIR}/packages/frontend/node_modules

image: danlynn/ember-cli:3.1.4

variables:
  YARN_CACHE_FOLDER: ${CI_PROJECT_DIR}/.cache_yarn
  DOCKER_DRIVER: overlay2

# Gitlab's pipelines have about 3.5 minutes of overhead per stage
# see previous run: https://gitlab.com/NullVoxPopuli/emberclear/pipelines/24394951/builds
# where all the pipeline steps are split out
#
# This one stage takes on average: 6-8 minutes
# All the stages take on average: 20-25 minutes
#
# This likely due to the (un)zipping of cache
# and network transfer between gitlab and wherever cache is stored.
#
# Using a self-hosted gitlab-runner with local-to-the-runner-cache
# would be a huge win.
#
# TODO: look into free-tier IaaS machines for hosting a gitlab-runner
the-everything-stage-for-speed:
  stage: build
  tags: [ docker ]
  script:
    # TODO: extract all this to bash script?
    - rm -rf ./packages/frontend/{dist,tmp,node_modules,yarn.lock}
    - time ./run yarn install
    #  clean
    - time ./run yarn lint
    - time ./run yarn test

    # TODO: do branch check here in bash
    - >
      BRANCH=$(git rev-parse --abbrev-ref HEAD)

      if [[ "$BRANCH" == "master" ]]; then
        time ./run yarn build:production
        time npm i -g netlify-cli
        time netlify deploy -s emberclear -p packages/frontend/dist -t $NETLIFY_ACCESS_TOKEN -e production
      fi

# lint:
#   stage: test
#   tags: [ docker ]
#   dependencies: [ setup ]
#   script: [ time ./run yarn lint ]
#
# # TODO: coverage?
# test:
#   stage: test
#   tags: [ docker ]
#   dependencies: [ setup ]
#   script: [ time ./run yarn test ]
#
#
# build-production:
#   stage: build
#   tags: [ docker ]
#   dependencies: [ setup ]
#   script:
#     - time ./run yarn build:production
#   artifacts:
#     paths:
#       - ${CI_PROJECT_DIR}/packages/frontend/dist
#
#
# deploy-production:
#   stage: deploy
#   tags: [ docker ]
#   script:
#     - time npm i -g netlify-cli
#     - time netlify deploy -s emberclear -p packages/frontend/dist -t $NETLIFY_ACCESS_TOKEN -e production
#
# setup:
#   stage: setup
#   tags: [ docker ]
#   script: [ time ./run yarn install ]
