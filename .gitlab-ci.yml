stages:
  - setup
  - quality
  - test
  - build
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache_yarn
    - ${CI_PROJECT_DIR}/packages/frontend/node_modules

image: danlynn/ember-cli:3.1.4
variables:
  YARN_CACHE_FOLDER: .cache_yarn
  DOCKER_DRIVER: overlay2

lint:
  stage: test
  tags:
    - docker
  allow_failure: true
  script:
    - ./run yarn lint
  dependencies:
    - setup
#
# code_quality:
#   stage: test
#   image: docker:stable
#   variables:
#     DOCKER_DRIVER: overlay2
#   allow_failure: true
#   services:
#     - docker:stable-dind
#   script:
#     - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
#     - docker run
#         --env SOURCE_CODE="$PWD"
#         --volume "$PWD/packages/frontend":/code
#         --volume /var/run/docker.sock:/var/run/docker.sock
#         "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
#   artifacts:
#     paths: [gl-code-quality-report.json]

# TODO: coverage?
test:
  stage: test
  tags:
    - docker
  script: [time ./run yarn test]
  dependencies:
    - setup

build-production:
  stage: build
  tags:
    - docker
  script:
    - time ./run yarn build:production
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/packages/frontend/dist
  dependencies:
    - setup

deploy-production:
  stage: deploy
  tags:
    - docker
  script:
    - time npm i -g netlify-cli
    - time netlify deploy -s emberclear -p packages/frontend/dist -t $NETLIFY_ACCESS_TOKEN -e production

setup:
  stage: setup
  tags:
    - docker
  script:
    - time ./run yarn install
  artifacts:
    paths:
      - /usr/local/bin
      - ${CI_PROJECT_DIR}/packages/frontend/node_modules/
