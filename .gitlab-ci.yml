stages:
  - setup
  - quality
  - test
  - build
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache_yarn
    - ${CI_PROJECT_DIR}/packages/frontend/node_modules

image: node:latest
variables:
  YARN_CACHE_FOLDER: .cache_yarn

before_script:
  - npm config set spin false

lint:
  stage: quality
  tags:
    - docker
  allow_failure: true
  script:
    - ./run yarn lint
  dependencies:
    - setup

test:
  stage: test

  tags:
    - docker
  before_script:
    - set -xe
    - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
    - echo "deb http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google.list
    # Update packages
    - apt-get update -yqqq
    # Install Chrome browser
    - apt-get install -y google-chrome-stable
    # Install Virtual Display emulator
    - apt-get install -y xvfb
  script:
    - su nobody -c "./run yarn test"
  dependencies:
    - setup

production-build:
  stage: build
  tags:
    - docker
  script:
    - ./run yarn build:production
  artifacts:
    paths:
      - packages/frontend/dist
  dependencies:
    - setup

pages:
  stage: deploy
  script:
    - cp -r ${CI_PROJECT_DIR}/packages/frontend/dist/* public/
  artifacts:
    paths:
      - public
  only:
    - master
  dependencies:
    - production-build
    - setup


setup:
  stage: setup
  tags:
    - docker
  script:
    - ./run yarn install
  artifacts:
    paths:
      - /usr/local/bin
      - ${CI_PROJECT_DIR}/packages/frontend/node_modules/


code_quality:
  stage: quality
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    paths: [gl-code-quality-report.json]

dependency_scanning:
  stage: quality
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
  artifacts:
    paths: [gl-dependency-scanning-report.json]
