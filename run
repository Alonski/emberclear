#!/bin/bash
#
# A script to make working with docker/compose to have
# less typing.
#
# For local development only.

UI_PATH="packages/frontend"
COMPOSE="docker-compose -f scripts/docker-compose.yml --project-directory ./$UI_PATH -p emberclear"

function runstuff {
  # First arg
  given_command=$1
  # The rest of the args
  arguments=${@:2}

  case $given_command in
    up:build) ${COMPOSE} up --build $arguments;;
    up)       ${COMPOSE} up $arguments;;
    bash)     ${COMPOSE} run --rm $arguments bash;;

    restart) ${COMPOSE} stop $arguments && ${COMPOSE} start $arguments;;

    deploy)
      ( ./scripts/deploy )
    ;;

    yarn)
      ( cd $UI_PATH && yarn $arguments )
    ;;

    ember)
      # these two commands do the same as
      # docker-compose up --build
      # (kinda)
      docker build ./${UI_PATH} -t ember-cli
      docker run \
        --rm \
        -ti \
        -v $(pwd)/${UI_PATH}:/app \
        -p 4200:4200 -p 7020:7020 -p 7357:7357 \
        -u $(id -u):$(id -g) \
        ember-cli bash
    ;;

    docker)
     docker build ./${UI_PATH} -t emberclear \
     && \
       docker run -it \
         -p 4200:4200 \
         -p 7020:7020 \
         -v $PWD/${UI_PATH}:/app \
         --rm emberclear
   ;;

    clean:all)
      echo "Cleaning..."
      # Don't name any folders bin, obj, tmp, dist, or node_modules
      shopt -s globstar
      rm -rf **/dist && \
      rm -rf **/node_modules && \
      rm -rf **/tmp
    ;;

    *)
      echo "forwarding to docker-compose: $@"
      ${COMPOSE} $@
    ;;
  esac
}

if [ $1 ]; then
  runstuff $*
fi
